/*
 * Ent Schema API
 *
 * This is an auto generated API description made out of an Ent schema definition
 *
 * API version: 0.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	"github.com/mattn/entgo-openapi-example/crud"
	"github.com/mattn/entgo-openapi-example/ent"
)

func CreateEntry(w http.ResponseWriter, r *http.Request) {
	var ee ent.Entry
	err := json.NewDecoder(r.Body).Decode(&ee)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	client := crud.DefaultClient()
	e := client.Entry.Create()
	e.SetContent(ee.Content)
	if !ee.CreatedAt.IsZero() {
		e.SetCreatedAt(ee.CreatedAt)
	}
	if ee2, err := e.Save(context.Background()); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	} else {
		ee = *ee2
	}
	w.WriteHeader(http.StatusOK)
	err = json.NewEncoder(w).Encode(ee)
	if err != nil {
		log.Println(err)
	}
}

func DeleteEntry(w http.ResponseWriter, r *http.Request) {
	var id int
	if s, ok := mux.Vars(r)["id"]; !ok {
		http.Error(w, "id not found", http.StatusBadRequest)
		return
	} else {
		if i, err := strconv.Atoi(s); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		} else {
			id = i
		}
	}
	client := crud.DefaultClient()
	e := client.Entry.DeleteOneID(id)
	if err := e.Exec(context.Background()); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func ListEntry(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	client := crud.DefaultClient()
	ees, err := client.Entry.Query().All(context.Background())
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	err = json.NewEncoder(w).Encode(ees)
	if err != nil {
		log.Println(err)
	}
}

func ReadEntry(w http.ResponseWriter, r *http.Request) {
	var id int
	if s, ok := mux.Vars(r)["id"]; !ok {
		http.Error(w, "id not found", http.StatusBadRequest)
		return
	} else {
		if i, err := strconv.Atoi(s); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		} else {
			id = i
		}
	}
	client := crud.DefaultClient()
	ee, err := client.Entry.Get(context.Background(), id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	err = json.NewEncoder(w).Encode(ee)
	if err != nil {
		log.Println(err)
	}
}

func UpdateEntry(w http.ResponseWriter, r *http.Request) {
	var id int
	if s, ok := mux.Vars(r)["id"]; !ok {
		http.Error(w, "id not found", http.StatusBadRequest)
		return
	} else {
		if i, err := strconv.Atoi(s); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		} else {
			id = i
		}
	}
	var ee ent.Entry
	err := json.NewDecoder(r.Body).Decode(&ee)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	client := crud.DefaultClient()
	e := client.Entry.UpdateOneID(id)
	e.SetContent(ee.Content)
	if ee2, err := e.Save(context.Background()); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	} else {
		ee = *ee2
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	err = json.NewEncoder(w).Encode(ee)
	if err != nil {
		log.Println(err)
	}
}
